#!/usr/bin/env ruby
$:.unshift File.expand_path(File.dirname(__FILE__) + "/../lib")

require 'rubygems'
require 'optparse'
require 'logger'
require 'progressbar'
require 'kepler_processor'

include KeplerProcessor

LOGGER = Logger.new STDOUT
LOGGER.level = Logger::INFO

options = { :command => Convertor, :input_paths => [], :column_delimiter => " ", :column_converters => :float }

option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: kepler -c command -o output_directory [--columns 0,1] [-d ,] path_to_input_file(s)"

  opts.on("-c", "--command COMMAND", String, "Specify the command to execute [convert/transform/merge/append/plot_lc/uniquify/catalogue/slice/detrend/find_mod/find_phase/improve_fit/inspect/match_obs]") do |c|
    options[:command] = { convert: Convertor, transform: Transformer, merge: Merger, plot_lc: LightCurvePlotter, uniquify: IndexDupRemover, catalogue: CatalogueMaker, append: Appender, slice: Slicer, detrend: Detrender, find_mod: ModulationFinder, find_phase: PhaseFinder, improve_fit: Fitter, inspect: Inspector, match_obs: Matcher }[c.to_sym]
    if options[:command].nil?
      LOGGER.error "Invalid command. Options are [convert/transform/merge/append/plot_lc/uniquify/catalogue/slice/detrend/find_mod/find_phase/improve_fit/inspect/match_obs]"
      puts opts
      exit
    end
  end
  opts.on("-f", "--[no-]force_overwrite", "Force overwrite existing output files") do |f|
    options[:force_overwrite] = f
  end
  opts.on("-b", "--batch", "Adopt batch format of output filename for convertor") do |b|
    options[:batch] = b
  end
  opts.on("-p", "--plus_time", "Instruct convertor to add 55833.0 to the time values") do |t|
    options[:plus_time] = t
  end
  opts.on("-m", "--minus_time", "Instruct convertor to subtract 2400000.0 from the time values") do |t|
    options[:minus_time] = t
  end
  opts.on("-k", "--keep_name", "Keep the name of the input file when using convertor") do |k|
    options[:keep_name] = k
  end
  opts.on("-e", "--export", "Export amplitudes and other information from fourier transforms") do |e|
    options[:export] = e
  end
  opts.on("-p", "--print", "Print values of the fourier transforms to a file") do |p|
    options[:print] = p
  end
  opts.on("-g", "--good_data_only", "Keep only the data with quality flag '0' when using convertor") do |g|
    options[:good_data] = g
  end
  opts.on("-i", "--inbetween MIN,MAX", "Provide a frequency range inbetween which to calculate the fourier transform, e.g. 5,20. Defaults to 0,24 for LC data and 0,100 for SC data.") do |i|
    options[:fourier_range] = i
  end
  opts.on("-t", "--flux_type TAG", String, "Specify the flux type to be tagged in the filename, e.g. 'MAP'") do |t|
    options[:flux_type] = t
  end
  opts.on("-C", "--columns 0,1", Array, "Choose input file columns to be read. Defaults to 0,3") do |f|
    options[:file_columns] = f.map(&:to_i)
  end
  opts.on("-d", "--delimiter DELIMITER", String, "Specify delimiting character. Defaults to a single space") do |f|
    options[:column_delimiter] = f
  end
  opts.on("-o", "--output PATH", String, "Specify the path to the output directory. Defaults to data/output") do |p|
    options[:output_path] = p
  end
  opts.on("-r", "--merge-ratio RATIO", Integer, "Specify a merge ratio to use.") do |p|
    options[:merge_ratio] = p
  end
  opts.on("-s", "--slice-size SIZE", Float, "Specify a slice size to use.") do |p|
    options[:slice_size] = p
  end
  opts.on("-w", "--wider-resolution RATE", Float, "Specify the step rate parameter 'w' (step size = 1/(w*T)) for Fourier transforms. Defaults to high resolution (w=20)") do |w|
    options[:step_rate] = w
  end
  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
  opts.on_tail("-v", "--version", "Show version") do
    puts VERSION
    exit
  end
end

if ARGV.size.zero?
  option_parser.parse '--help'
else
  begin
    options[:input_paths] = option_parser.parse! # returns anything not handled by the options above - the input filenames.
  rescue
    LOGGER.error $! # print out error
    option_parser.parse '--help' # print out command glossary
  end
end

if options[:command] == Merger && !options.has_key?(:merge_ratio)
  LOGGER.error "You must provide an integer merge ratio"
  option_parser.parse '--help'
  exit
end

if options[:command] == Slicer && !options.has_key?(:slice_size)
  LOGGER.error "You must provide an slice size (in days)"
  option_parser.parse '--help'
  exit
end

if options[:command] == Convertor && !options.has_key?(:flux_type)
  LOGGER.error "You must provide a flux type e.g. 'MAP'."
  option_parser.parse '--help'
  exit
end

unless options[:output_path]
  LOGGER.error "You must specify an output path"
  option_parser.parse '--help'
end

options[:file_columns] ||= options[:command] == Convertor ? [0,3] : [0,1]

PBAR = ProgressBar.new options[:command].to_s, options[:input_paths].size

options[:command].new(options).execute!

PBAR.finish

LOGGER.close
